version: '3.8'

services:
  # PostgreSQL 데이터베이스
  postgres:
    image: postgres:15-alpine
    container_name: billiard-postgres
    environment:
      POSTGRES_DB: billiard3cushion
      POSTGRES_USER: billiard_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    networks:
      - billiard-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U billiard_user -d billiard3cushion"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis 캐시
  redis:
    image: redis:7-alpine
    container_name: billiard-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - billiard-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 백엔드 API 서버
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: billiard-backend
    environment:
      NODE_ENV: production
      PORT: 3001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: billiard3cushion
      DB_USER: billiard_user
      DB_PASSWORD: ${DB_PASSWORD:-secure_password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key}
      CORS_ORIGIN: ${FRONTEND_URL:-http://localhost:3000}
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - billiard-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 프론트엔드 웹 애플리케이션
  frontend:
    build:
      context: ./frontend-web
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: ${API_URL:-http://localhost:3001/api}
    container_name: billiard-frontend
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - billiard-network
    restart: unless-stopped

  # Nginx 리버스 프록시 (프로덕션용)
  nginx:
    image: nginx:alpine
    container_name: billiard-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - billiard-network
    restart: unless-stopped

networks:
  billiard-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: